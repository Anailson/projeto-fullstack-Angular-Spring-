package com.example.algamoney.api.config;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.provider.token.AccessTokenConverter;
import org.springframework.security.oauth2.provider.token.TokenEnhancerChain;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;

@Configurable
@EnableAuthorizationServer
public class AuthorizationServerConfig  extends AuthorizationServerConfigurerAdapter{
	
	@Autowired
	private AuthenticationManager authenticationManager;

	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {

		clients.inMemory()
				.withClient("angular")//nome do cliente
				.secret("@ngul@r0")
				.scopes("read", "write")//scope limpar o acesso do cliente angular
				.authorizedGrantTypes("password")
				.accessTokenValiditySeconds(1800);//tempo para cessar app
							
				
	}	
	

	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
		
		TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
		tokenEnhancerChain.setTokenEnhancers(Arrays.asList(tokenEnhancer(), acessTokenConverter()));
		
		endpoints
				.tokenStore(tokenStore())
				.accessTokenConverter(acessTokenConverter())
				//.authenticationManager(authenticationManager);
				.reuseRefreshTokens(false)//ser usa a aplicação todo o dia o token não expirar
				.authenticationManager(authenticationManager);
	}
	
	@Bean
	public JwtAccessTokenConverter acessTokenConverter() {
		JwtAccessTokenConverter acceAccessTokenConverter = new JwtAccessTokenConverter();
		acceAccessTokenConverter.setSigningKey("anailson");//chave que valida o token
		
		return acceAccessTokenConverter;
	}


	@Bean
	public TokenStore tokenStore() {
		
		return new InMemoryTokenStore();		
	}
}
